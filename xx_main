./operatorgraph/src/main/java/lupos/gui/Browser.java:49:	public static void main(final String[] args) {
./core/src/test/java/lupos/test/TestTrie.java:49:	public static void main(String[] args) throws IOException, TrieNotCopyableException {
./core/src/test/java/lupos/test/TestParser.java:19:	public static void main(final String[] args) throws Exception {
./core/src/test/java/lupos/test/TestStringArrayDBBPTree.java:39:	public static void main(final String[] args) throws ClassNotFoundException, IOException, URISyntaxException {
./core/src/test/java/lupos/test/TestRDF3XEngine.java:73:	public static void main(final String[] args) {
./core/src/test/java/lupos/test/TestIntArrayLSMTree.java:39:	public static void main(final String[] args) throws ClassNotFoundException, IOException, URISyntaxException {
./core/src/test/java/lupos/test/TestIntArrayDBBPTree.java:39:	public static void main(final String[] args) throws ClassNotFoundException, IOException, URISyntaxException {
./core/src/test/java/lupos/test/TestMemoryEngine.java:38:	public static void main(String[] args) {
./core/src/test/java/lupos/test/TestStream.java:250:	public static void main(final String[] args) {
./core/src/main/java/lupos/misc/FileHelper.java:517:	public static void main(final String args[]) {
./core/src/main/java/lupos/datastructures/dbmergesortedds/DBMergeSortedSet.java:343:	public static void main(final String[] arg){
./core/src/main/java/lupos/datastructures/dbmergesortedds/DBMergeSortedBag.java:1156:	public static void main(final String[] arg){
./core/src/main/java/lupos/datastructures/sort/Sort.java:137:	public static void main(final String[] args) throws Exception{
./core/src/main/java/lupos/datastructures/sort/StringLengthStatistics.java:46:	public static void main(final String[] args) throws Exception{
./core/src/main/java/lupos/datastructures/stringarray/StringArray.java:612:	public static void main(final String[] args) throws IOException{
./core/src/main/java/lupos/datastructures/simplifiedfractaltree/SimplifiedFractalTree.java:1634:	public static void main(final String[] args) throws InterruptedException {
./core/src/main/java/lupos/datastructures/paged_dbbptree/DBBPTree.java:3197:	public static void main(final String[] args) {
./core/src/main/java/lupos/datastructures/paged_set/PagedHashMultiSet.java:711:	public static void main(final String[] args) throws IOException{
./core/src/main/java/lupos/datastructures/smallerinmemorylargerondisk/PagedCollection.java:370:	public static void main(final String[] args) throws IOException{
./core/src/main/java/lupos/datastructures/paged_map/PagedHashMultiMap.java:1691:	public static void main(final String[] args) throws IOException {
./core/src/main/java/lupos/datastructures/lsmtree/LSMTreeDemo.java:19:	public static void main(final String args[]) throws ClassNotFoundException, IOException, URISyntaxException{
./core/src/main/java/lupos/datastructures/lsmtree/Experiments.java:47:	public static void main(final String[] args) throws FileNotFoundException, Exception {
./core/src/main/java/lupos/datastructures/lsmtree/level/disk/store/StoreIntTriple.java:803:	public static void main(final String[] args) throws ClassNotFoundException, IOException, URISyntaxException{
./core/src/main/java/lupos/sparql1_1/StreamSPARQL1_1Parser.jjt:3:  JAVA_UNICODE_ESCAPE = true;  VISITOR = true;  STATIC = false;}PARSER_BEGIN(StreamSPARQL1_1Parser)package lupos.sparql1_1;import java.io.*;import java.util.HashSet;public class StreamSPARQL1_1Parser{  public static void main(String args [])  {    System.out.println("enter query...");    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(System.in);    try    {            	parser.expr();      	System.out.println("Result:");			((SimpleNode) parser.jjtree.rootNode()).dump("|");} catch(Exception e){ System.out.println(e); e.printStackTrace();}  }  public static SimpleNode parse(String query) throws ParseException  {    StreamSPARQL1_1Parser parser = new StreamSPARQL1_1Parser(new StringReader(query));    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }  protected HashSet < String > declaredPrefixes = new HashSet < String > ();}PARSER_END(StreamSPARQL1_1Parser)void GroupGraphPatternsAndRDFTermsEOF() #GroupConstraint:{}{ 	(GroupGraphPattern())*(VarOrTerm())* < EOF >}void N3GroupGraphPatternsAndRDFTermsEOF() #GroupConstraint:{}{	(N3GroupConstraint())*(GraphTerm())* <EOF>}void N3GroupConstraint() #GroupConstraint :{}{ "{" (N3TriplesSet() (".")?)* "}"}void N3TriplesSet()#TripleSet:{}{  GraphTerm() (URI() | BlankNode()) GraphTerm()}void ConstraintEOF() :{}{  (    Constraint() < EOF >  )}void VarOrTermEOF() :{}{  (    VarOrTerm() < EOF >  )}void GraphTermEOF() :{}{  (    GraphTerm() < EOF >  )}void VerbEOF() :{}{  (    Verb() < EOF >  )}void VerbWithoutVarEOF() :{}{  (    URI()  | ("a" #AVerbType)  )  < EOF >}void GroupGraphPatternEOF() :{}{  GroupGraphPattern() < EOF >}void VarEOF() :{}{  (    Var() < EOF >  )}void SourceSelectorEOF() :{}{  (    SourceSelector() < EOF >  )}void OrderConditionEOF() :{}{  (    OrderCondition() < EOF >  )}void VarOrBlankNodeOrIRIrefEOF() :{}{  (    VarOrBlankNodeOrIRIref() < EOF >  )}void VarOrURIEOF() :{}{  (    VarOrURI() < EOF >  )}SKIP :{  " "| "\t"| "\n"| "\r"| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? > //NEW SKIP COMMENTS JK
./core/src/main/java/lupos/sparql1_1/SPARQL1_1Parser.java:34:  protected JJTSPARQL1_1ParserState jjtree = new JJTSPARQL1_1ParserState();public static void main(String args [])
./core/src/main/java/lupos/sparql1_1/StreamSPARQL1_1Parser.java:34:  protected JJTStreamSPARQL1_1ParserState jjtree = new JJTStreamSPARQL1_1ParserState();public static void main(String args [])
./core/src/main/java/lupos/sparql1_1/SPARQL1_1Parser.jjt:3:  JAVA_UNICODE_ESCAPE = true;  VISITOR = true;  STATIC = false;}PARSER_BEGIN(SPARQL1_1Parser)package lupos.sparql1_1;import java.io.*;import java.util.HashSet;public class SPARQL1_1Parser{  public static void main(String args [])  {    System.out.println("enter query...");    SPARQL1_1Parser parser = new SPARQL1_1Parser(System.in);    try    {            	parser.expr();      	System.out.println("Result:");			((SimpleNode) parser.jjtree.rootNode()).dump("|");} catch(Exception e){ System.out.println(e); e.printStackTrace();}  }  public static SimpleNode parse(String query) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }  public static ASTGroupConstraint parseGroupGraphPatternsAndRDFTerms(String query) throws ParseException {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));	parser.GroupGraphPatternsAndRDFTermsEOF();	return ((ASTGroupConstraint) parser.jjtree.rootNode());  }  public static ASTGroupConstraint parseN3GroupGraphPatternsAndRDFTerms(String query) throws ParseException {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));	parser.N3GroupGraphPatternsAndRDFTermsEOF();	return ((ASTGroupConstraint) parser.jjtree.rootNode());  }    public static SimpleNode parseFilter(String query) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.ConstraintEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseFilter(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.ConstraintEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseRDFTerm(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.VarOrTermEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseGraphTerm(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.GraphTermEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseVerb(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.VerbEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseVerbWithoutVar(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.VerbWithoutVarEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseGroupGraphPattern(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.GroupGraphPatternEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseVar(String query) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.VarEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseSourceSelector(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.SourceSelectorEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseOrderCondition(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.OrderConditionEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseVarOrBlankNodeOrIRIref(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.VarOrBlankNodeOrIRIrefEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  public static SimpleNode parseVarOrURI(String query, HashSet < String > declaredPrefixes) throws ParseException  {    SPARQL1_1Parser parser = new SPARQL1_1Parser(new StringReader(query));    parser.declaredPrefixes = declaredPrefixes;    parser.VarOrURIEOF();    return ((SimpleNode) parser.jjtree.rootNode());  }  protected HashSet < String > declaredPrefixes = new HashSet < String > ();}PARSER_END(SPARQL1_1Parser)void GroupGraphPatternsAndRDFTermsEOF() #GroupConstraint:{}{ 	(GroupGraphPattern())*(VarOrTerm())* < EOF >}void N3GroupGraphPatternsAndRDFTermsEOF() #GroupConstraint:{}{	(N3GroupConstraint())*(GraphTerm())* <EOF>}void N3GroupConstraint() #GroupConstraint :{}{ "{" (N3TriplesSet() (".")?)* "}"}void N3TriplesSet()#TripleSet:{}{  GraphTerm() (URI() | BlankNode()) GraphTerm()}void ConstraintEOF() :{}{  (    ("FILTER")? Constraint() < EOF >  )}void VarOrTermEOF() :{}{  (    VarOrTerm() < EOF >  )}void GraphTermEOF() :{}{  (    GraphTerm() < EOF >  )}void VerbEOF() :{}{  (    Verb() < EOF >  )}void VerbWithoutVarEOF() :{}{  (    URI()  | ("a" #AVerbType)  )  < EOF >}void GroupGraphPatternEOF() :{}{  GroupGraphPattern() < EOF >}void VarEOF() :{}{  (    Var() < EOF >  )}void SourceSelectorEOF() :{}{  (    SourceSelector() < EOF >  )}void OrderConditionEOF() :{}{  (    OrderCondition() < EOF >  )}void VarOrBlankNodeOrIRIrefEOF() :{}{  (    VarOrBlankNodeOrIRIref() < EOF >  )}void VarOrURIEOF() :{}{  (    VarOrURI() < EOF >  )}SKIP :{  " "| "\t"| "\n"| "\r"| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? > //NEW SKIP COMMENTS JK
./core/src/main/java/lupos/optimizations/logical/rules/findsubgraph/FindSubGraph.java:371:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/RDF3XIndexConstruction.java:120:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/RDF3XStringArrayIndexConstruction.java:68:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/ConstructIndex.java:276:	public static void main(final String[] args) throws Exception {
./core/src/main/java/lupos/engine/indexconstruction/ConstructIndex.java:367:	public static void main(final String[] args, final int argsoffset, Map<String, Object> configuration) throws Exception {
./core/src/main/java/lupos/engine/indexconstruction/FastRDF3XIntArrayIndexConstruction.java:63:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/FastRDF3XIndexConstruction.java:132:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/FastRDF3XIndexConstruction.java:147:	public static void main(final GenerateIndicesAndWriteOut generateIndicesAndWriteOut, final String[] args) {
./core/src/main/java/lupos/engine/indexconstruction/RDF3XEmptyIndexConstruction.java:74:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/evaluators/StreamQueryEvaluator.java.save.1:884:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/evaluators/StreamQueryEvaluator.java:884:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/evaluators/RDF3XQueryEvaluator.java:390:	public static void main(final String[] args) {
./core/src/main/java/lupos/engine/evaluators/MemoryIndexQueryEvaluator.java:216:	public static void main(final String[] args) {
./ruleeditor/src/main/java/lupos/gui/operatorgraph/visualeditor/ruleeditor/RuleEditor.java:437:	public static void main(String[] args) {
./distributedp2p/src/main/java/lupos/distributed/p2p/network/impl/EndpointNetwork.java:107:	public static void main(final String[] args) {
./distributedp2p/src/main/java/lupos/distributed/p2p/network/P2PNetworkCreator.java:399:	public static void main(final String[] args) throws InterruptedException {
./distributedp2p/src/main/java/lupos/distributed/p2p/commandline/StartConsole.java:632:	public static void main(final String[] args) {
./distributedp2p/src/main/java/lupos/distributed/p2p/gui/Start_Demo_Applet_DE.java:46:	public static void main(final String[] args) throws ClassNotFoundException {
./distributedendpoints/src/main/java/lupos/distributedendpoints/endpoint/ClearIndex.java:47:	public static void main(final String[] args) {
./distributedendpoints/src/main/java/lupos/distributedendpoints/endpoint/StartEndpoint.java:71:	public static void main(final String[] args) {
./distributedendpoints/src/main/java/lupos/distributedendpoints/gui/Start_Demo_Applet_DE.java:54:	public static void main(final String[] args) throws ClassNotFoundException {
./extendedendpoint/src/test/java/lupos/test/TestExtendedEndpoint.java:23:	public static void main(final String[] args) throws Exception {
./extendedendpoint/src/main/java/lupos/endpoint/ExtendedEndpoint.java:49:	public static void main(final String[] args) throws Exception {
./rif/src/test/java/lupos/test/TestRIFEngine.java:113:	public static void main(final String[] args) {
./internetofevents/src/main/java/lupos/event/producer/EventsProducer.java:185:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/CountProducer.java:86:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/MoonProducer.java:185:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/rsssemantics/RSSSemanticInterpretationProducer.java:78:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/MtGoxProducer.java:132:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/ButtonClickedProducer.java:89:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/ebay/EbayProducer.java:156:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/SysMonProducer.java:135:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/MensaProducer.java:210:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/AlarmProducer.java:138:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/DBDelayProducer.java:347:	public static void main(final String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/WeatherProducer.java:345:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/TwitterSearchProducer.java:123:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/EmptyProducer.java:73:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/webpage/LottoProducer.java:172:	public static void main(String[] args) throws Exception {		
./internetofevents/src/main/java/lupos/event/producer/webpage/WaterTempProducer.java:135:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/webpage/WindFinderProducer.java:167:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/yql/FinanceProducer.java:146:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/yql/WeatherBerlin.java:63:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/yql/YQLQueryProducer.java:168:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/producer/BTDevicesProducer.java:146:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/broker/distributed/MasterBroker.java:179:	public static void main(String[] args){
./internetofevents/src/main/java/lupos/event/broker/distributed/SubBroker.java:468:	public static void main(String[] args) throws Exception{		
./internetofevents/src/main/java/lupos/event/broker/centralized/Broker.java:242:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/action/PlayWavAction.java:88:	public static void main(String[] args) {
./internetofevents/src/main/java/lupos/event/action/XmppMessageAction.java:60:	public static void main(String[] args) {
./internetofevents/src/main/java/lupos/event/consumer/querybuilder/EventQueryBuilderView.java:350:	public static void main(String[] args) {
./internetofevents/src/main/java/lupos/event/consumer/app/Main.java:38:	public static void main(String[] args) throws Exception {
./internetofevents/src/main/java/lupos/event/consumer/html/Main.java:48:	public static void main(final String[] args) throws Exception {
./geosparql/src/main/java/lupos/endpoint/server/Geo_Endpoint.java:39:	public static void main(final String[] args) throws Exception {
./geosparql/src/main/java/lupos/gui/Geo_Demo_Applet.java:45:	public static void main(final String[] args) {
./geosparql/src/main/java/lupos/gui/Geo_RDF3X_Client.java:38:	public static void main(final String[] args) {
./queryeditor/src/main/java/lupos/gui/operatorgraph/visualeditor/queryeditor/QueryEditor.java:1227:	public static void main(final String[] args) {
./integrationJena/src/main/java/lupos/engine/evaluators/JenaQueryEvaluator.java:370:	public static void main(final String[] args) {
./endpoint/src/main/java/lupos/endpoint/server/StopServer.java:40:    public static void main(final String[] args) throws UnknownHostException, IOException {
./endpoint/src/main/java/lupos/endpoint/server/Endpoint.java:212:	public static void main(final String[] args) throws Exception {
./endpoint/src/main/java/lupos/endpoint/caching/DeltaEndpoint.java:72:	public static void main(final String[] args) throws Exception {
./endpoint/src/main/java/lupos/endpoint/caching/DeltaClient.java:109:	public static void main(final String[] args) {
./endpoint/src/main/java/lupos/endpoint/client/CommandLineEvaluator.java:42:	public static void main(final String[] args) {
./endpoint/src/main/java/lupos/endpoint/client/formatreader/tsv/TSVParser.jjt:3:  JAVA_UNICODE_ESCAPE = true;  VISITOR = true;  STATIC = false;}PARSER_BEGIN(TSVParser)package lupos.endpoint.client.formatreader.tsv;import java.io.*;import java.net.URISyntaxException;import lupos.datastructures.items.literal.Literal;import lupos.datastructures.items.literal.LiteralFactory;import lupos.datastructures.items.literal.TypedLiteralOriginalContent;import lupos.datastructures.items.literal.URILiteral;import lupos.datastructures.items.literal.LanguageTaggedLiteralOriginalLanguage;public class TSVParser{  public static void main(String args [])  {    System.out.println("enter query...");    TSVParser parser = new TSVParser(System.in);    try    {            	parser.expr();      	System.out.println("Result:");			((SimpleNode) parser.jjtree.rootNode()).dump("|");	} catch(Exception e) { 		System.out.println(e); 		e.printStackTrace();	}  }  	public static Literal getLiteral(Node n) {  	  return getLiteral(n, false);  	}  	public static Literal getLiteral(Node n, final boolean allowLazyLiteral) {		Literal literal = null;		if (n instanceof ASTNIL) {			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createURILiteral("<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>")						: LiteralFactory								.createURILiteralWithoutLazyLiteral("<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>");			} catch (final URISyntaxException e1) {				e1.printStackTrace();			}		} else if (n instanceof ASTBlankNode) {			final ASTBlankNode blankNode = (ASTBlankNode) n;			final String name = blankNode.getIdentifier();			literal = (allowLazyLiteral) ? LiteralFactory					.createAnonymousLiteral(name) : LiteralFactory					.createAnonymousLiteralWithoutLazyLiteral(name);		} else if (n instanceof ASTQuotedURIRef) {			final ASTQuotedURIRef uri = (ASTQuotedURIRef) n;			final String name = uri.getQRef();			if (URILiteral.isURI("<" + name + ">")) {				try {					literal = (allowLazyLiteral) ? LiteralFactory							.createURILiteral("<" + name + ">")							: LiteralFactory									.createURILiteralWithoutLazyLiteral("<"											+ name + ">");				} catch (final Exception e) {					literal = (allowLazyLiteral) ? LiteralFactory							.createLiteral("<" + name + ">") : LiteralFactory							.createLiteralWithoutLazyLiteral("<" + name + ">");				}			} else				literal = (allowLazyLiteral) ? LiteralFactory.createLiteral("<"						+ name + ">") : LiteralFactory						.createLiteralWithoutLazyLiteral("<" + name + ">");		} else if (n instanceof ASTRDFLiteral)			n = n.jjtGetChild(0);		if (literal != null)			return literal;		if (n instanceof ASTStringLiteral) {			final ASTStringLiteral lit = (ASTStringLiteral) n;			final String quotedContent = lit.getStringLiteral();			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral(quotedContent,								"<http://www.w3.org/2001/XMLSchema#string>")						: TypedLiteralOriginalContent.createTypedLiteral(								quotedContent,								"<http://www.w3.org/2001/XMLSchema#string>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(quotedContent) : LiteralFactory						.createLiteralWithoutLazyLiteral(quotedContent);			}		} else if (n instanceof ASTInteger) {			final ASTInteger lit = (ASTInteger) n;			final String content = String.valueOf(lit.getValue());			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral("\"" + content + "\"",								"<http://www.w3.org/2001/XMLSchema#integer>")						: TypedLiteralOriginalContent.createTypedLiteral("\""								+ content + "\"",								"<http://www.w3.org/2001/XMLSchema#integer>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTFloatingPoint) {			final ASTFloatingPoint lit = (ASTFloatingPoint) n;			final String content = lit.getValue();			try {				if (content.contains("e") || content.contains("E"))					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral("\"" + content + "\"",									"<http://www.w3.org/2001/XMLSchema#double>")							: TypedLiteralOriginalContent									.createTypedLiteral("\"" + content + "\"",											"<http://www.w3.org/2001/XMLSchema#double>");				else					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral("\"" + content + "\"",									"<http://www.w3.org/2001/XMLSchema#decimal>")							: TypedLiteralOriginalContent									.createTypedLiteral("\"" + content + "\"",											"<http://www.w3.org/2001/XMLSchema#decimal>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTBooleanLiteral) {			final String content = ((ASTBooleanLiteral) n).getState() + "";			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral("\"" + content + "\"",								"<http://www.w3.org/2001/XMLSchema#boolean>")						: TypedLiteralOriginalContent.createTypedLiteral("\""								+ content + "\"",								"<http://www.w3.org/2001/XMLSchema#boolean>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTDoubleCircumflex) {			if (n.jjtGetNumChildren() != 2)				System.err.println(n + " is expected to have 2 children!");			else {				final String content = getLiteral(n.jjtGetChild(0), allowLazyLiteral).toString();				final String type = getLiteral(n.jjtGetChild(1), allowLazyLiteral).toString();				try {					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral(content, type)							: TypedLiteralOriginalContent.createTypedLiteral(									content, type);				} catch (final Exception e) {					literal = (allowLazyLiteral) ? LiteralFactory							.createLiteral(content + "^^" + type)							: LiteralFactory									.createLiteralWithoutLazyLiteral(content											+ "^^" + type);				}			}		} else if (n instanceof ASTLangTag) {			final String content = getLiteral(n.jjtGetChild(0), allowLazyLiteral).toString();			final String lang = ((ASTLangTag) n).getLangTag();			literal = (allowLazyLiteral) ? LiteralFactory					.createLanguageTaggedLiteral(content, lang)					: LanguageTaggedLiteralOriginalLanguage							.createLanguageTaggedLiteral(content, lang);		} else			System.err.println("Unexpected type! "					+ n.getClass().getSimpleName());		return literal;	}  public static SimpleNode parse(String query) throws ParseException  {    TSVParser parser = new TSVParser(new StringReader(query));    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }  public static SimpleNode parse(final InputStream inputStream) throws ParseException  {    TSVParser parser = new TSVParser(inputStream);    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }}PARSER_END(TSVParser)SKIP :{  " "| "\r"| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? > //NEW SKIP COMMENTS JK
./endpoint/src/main/java/lupos/endpoint/client/formatreader/tsv/TSVParser.java:41:  protected JJTTSVParserState jjtree = new JJTTSVParserState();public static void main(final String args [])
./endpoint/src/main/java/lupos/endpoint/client/formatreader/csv/CSVParser.java:41:  protected JJTCSVParserState jjtree = new JJTCSVParserState();public static void main(final String args [])
./endpoint/src/main/java/lupos/endpoint/client/formatreader/csv/CSVParser.jjt:3:  JAVA_UNICODE_ESCAPE = true;  VISITOR = true;  STATIC = false;}PARSER_BEGIN(CSVParser)package lupos.endpoint.client.formatreader.csv;import java.io.*;import java.net.URISyntaxException;import lupos.datastructures.items.literal.Literal;import lupos.datastructures.items.literal.LiteralFactory;import lupos.datastructures.items.literal.TypedLiteralOriginalContent;import lupos.datastructures.items.literal.URILiteral;import lupos.datastructures.items.literal.LanguageTaggedLiteralOriginalLanguage;public class CSVParser{  public static void main(String args [])  {    System.out.println("enter query...");    CSVParser parser = new CSVParser(System.in);    try    {            	parser.expr();      	System.out.println("Result:");			((SimpleNode) parser.jjtree.rootNode()).dump("|");	} catch(Exception e) { 		System.out.println(e); 		e.printStackTrace();	}  }  	public static Literal getLiteral(Node n) {  	  return getLiteral(n, false);  	}  	public static Literal getLiteral(Node n, final boolean allowLazyLiteral) {		Literal literal = null;		if (n instanceof ASTNIL) {			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createURILiteral("<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>")						: LiteralFactory								.createURILiteralWithoutLazyLiteral("<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>");			} catch (final URISyntaxException e1) {				e1.printStackTrace();			}		} else if (n instanceof ASTBlankNode) {			final ASTBlankNode blankNode = (ASTBlankNode) n;			final String name = blankNode.getIdentifier();			literal = (allowLazyLiteral) ? LiteralFactory					.createAnonymousLiteral(name) : LiteralFactory					.createAnonymousLiteralWithoutLazyLiteral(name);		} else if (n instanceof ASTQuotedURIRef) {			final ASTQuotedURIRef uri = (ASTQuotedURIRef) n;			final String name = uri.getQRef();			if (URILiteral.isURI("<" + name + ">")) {				try {					literal = (allowLazyLiteral) ? LiteralFactory							.createURILiteral("<" + name + ">")							: LiteralFactory									.createURILiteralWithoutLazyLiteral("<"											+ name + ">");				} catch (final Exception e) {					literal = (allowLazyLiteral) ? LiteralFactory							.createLiteral("<" + name + ">") : LiteralFactory							.createLiteralWithoutLazyLiteral("<" + name + ">");				}			} else				literal = (allowLazyLiteral) ? LiteralFactory.createLiteral("<"						+ name + ">") : LiteralFactory						.createLiteralWithoutLazyLiteral("<" + name + ">");		} else if (n instanceof ASTRDFLiteral)			n = n.jjtGetChild(0);		if (literal != null)			return literal;		if (n instanceof ASTStringLiteral) {			final ASTStringLiteral lit = (ASTStringLiteral) n;			final String quotedContent = lit.getStringLiteral();			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral(quotedContent,								"<http://www.w3.org/2001/XMLSchema#string>")						: TypedLiteralOriginalContent.createTypedLiteral(								quotedContent,								"<http://www.w3.org/2001/XMLSchema#string>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(quotedContent) : LiteralFactory						.createLiteralWithoutLazyLiteral(quotedContent);			}		} else if (n instanceof ASTInteger) {			final ASTInteger lit = (ASTInteger) n;			final String content = String.valueOf(lit.getValue());			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral("\"" + content + "\"",								"<http://www.w3.org/2001/XMLSchema#integer>")						: TypedLiteralOriginalContent.createTypedLiteral("\""								+ content + "\"",								"<http://www.w3.org/2001/XMLSchema#integer>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTFloatingPoint) {			final ASTFloatingPoint lit = (ASTFloatingPoint) n;			final String content = lit.getValue();			try {				if (content.contains("e") || content.contains("E"))					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral("\"" + content + "\"",									"<http://www.w3.org/2001/XMLSchema#double>")							: TypedLiteralOriginalContent									.createTypedLiteral("\"" + content + "\"",											"<http://www.w3.org/2001/XMLSchema#double>");				else					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral("\"" + content + "\"",									"<http://www.w3.org/2001/XMLSchema#decimal>")							: TypedLiteralOriginalContent									.createTypedLiteral("\"" + content + "\"",											"<http://www.w3.org/2001/XMLSchema#decimal>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTBooleanLiteral) {			final String content = ((ASTBooleanLiteral) n).getState() + "";			try {				literal = (allowLazyLiteral) ? LiteralFactory						.createTypedLiteral("\"" + content + "\"",								"<http://www.w3.org/2001/XMLSchema#boolean>")						: TypedLiteralOriginalContent.createTypedLiteral("\""								+ content + "\"",								"<http://www.w3.org/2001/XMLSchema#boolean>");			} catch (final URISyntaxException e) {				literal = (allowLazyLiteral) ? LiteralFactory						.createLiteral(content) : LiteralFactory						.createLiteralWithoutLazyLiteral(content);			}		} else if (n instanceof ASTDoubleCircumflex) {			if (n.jjtGetNumChildren() != 2)				System.err.println(n + " is expected to have 2 children!");			else {				final String content = getLiteral(n.jjtGetChild(0), allowLazyLiteral).toString();				final String type = getLiteral(n.jjtGetChild(1), allowLazyLiteral).toString();				try {					literal = (allowLazyLiteral) ? LiteralFactory							.createTypedLiteral(content, type)							: TypedLiteralOriginalContent.createTypedLiteral(									content, type);				} catch (final Exception e) {					literal = (allowLazyLiteral) ? LiteralFactory							.createLiteral(content + "^^" + type)							: LiteralFactory									.createLiteralWithoutLazyLiteral(content											+ "^^" + type);				}			}		} else if (n instanceof ASTLangTag) {			final String content = getLiteral(n.jjtGetChild(0), allowLazyLiteral).toString();			final String lang = ((ASTLangTag) n).getLangTag();			literal = (allowLazyLiteral) ? LiteralFactory					.createLanguageTaggedLiteral(content, lang)					: LanguageTaggedLiteralOriginalLanguage							.createLanguageTaggedLiteral(content, lang);		} else			System.err.println("Unexpected type! "					+ n.getClass().getSimpleName());		return literal;	}  public static SimpleNode parse(String query) throws ParseException {    CSVParser parser = new CSVParser(new StringReader(query));    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }    public static SimpleNode parse(final InputStream inputStream) throws ParseException {    CSVParser parser = new CSVParser(inputStream);    switch (parser.expr())    {      default :		try {	 		return ((SimpleNode) parser.jjtree.rootNode());		} catch(Exception e) {			return null;		}      case 0 : return null;      case - 1 : return null;    }  }}PARSER_END(CSVParser)SKIP :{  " "| "\r"| < "#" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    )? > //NEW SKIP COMMENTS JK
./endpoint/src/main/java/lupos/engine/evaluators/SaveRDF3XResult.java:45:	public static void main(final String[] args) throws Exception{
./gui/src/main/java/lupos/distributed/gui/Start_Demo_Applet.java:86:	public static void main(final String[] args) throws ClassNotFoundException {
./gui/src/main/java/lupos/endpoint/server/DebugEndpoint.java:78:	public static void main(final String[] args) throws Exception {
./gui/src/main/java/lupos/gui/RDF3X_Client.java:65:	public static void main(final String args[]) {
./gui/src/main/java/lupos/gui/Demo_Applet.java:304:	public static void main(final String args[]) {
./gui/src/main/java/lupos/gui/GUI.java:94:	public static void main(String[] args) throws Exception {
./compression/src/main/java/lupos/compression/Test_DeCompress.java:150:	public static void main(final String[] args) {
./dataeditor/src/main/java/lupos/gui/operatorgraph/visualeditor/dataeditor/DataEditor.java:545:	public static void main(final String[] args) {
./integrationSesame/src/main/java/lupos/engine/evaluators/SesameQueryEvaluator.java:280:	public static void main(final String[] args) {
./rifeditor/src/main/java/lupos/gui/operatorgraph/visualeditor/visualrif/VisualRifEditor.java:502:	public static void main(final String[] args){
